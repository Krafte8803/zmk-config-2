#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/rgb.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/ext_power.h>
#include <dt-bindings/zmk/outputs.h>

#define BASE    0
#define RAISE   1
#define LOWER   2



// Commenting out combos -- not sure if I will need combos on a 12col, will revisit
/* / {
    combos {
        compatible = "zmk,combos";
        combo_undo {
            timeout-ms = <50>;
            key-positions = <26 27>;
            bindings = <&kp LC(Z)>;
        };
        combo_q {
            timeout-ms = <50>;
            key-positions = <27 28>;
            bindings = <&kp Q>;
        };
        combo_semicolon {
            timeout-ms = <50>;
            key-positions = <33 34>;
            bindings = <&kp SEMI>;
        };
    };
}; */

/ {

    sensors {
        compatible = "zmk,keymap-sensors";
        sensors = <&encoder_1 &encoder_2 &encoder_3>;
    };
// Disabling default homerow mods behaviors -- will update this later with my settings
/* 
    behaviors {
        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick_tap_ms = <0>;
            flavor = "balanced";
            bindings = <&kp>, <&kp>;
        };
        hs: homerow_shift {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS";
            #binding-cells = <2>;
            tapping-term-ms = <175>;
            quick_tap_ms = <0>;
            flavor = "balanced";
            bindings = <&kp>, <&kp>;
        };
    };
 */

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            label = "Base";

            sensor-bindings = <&inc_dec_kp C_VOLUME_UP C_VOLUME_DOWN &inc_dec_kp C_VOLUME_UP C_VOLUME_DOWN &inc_dec_kp C_VOLUME_UP C_VOLUME_DOWN>;

            bindings = <
	&mt LCTRL ESC   &kp Q &kp W &kp E &kp R &kp T                                                 &kp Y &kp U  &kp I     &kp O   &kp P    &mt LALT MINUS
	&lt RAISE TAB  	&kp A &kp S &kp D &kp F &kp G                       &kp LA(TAB)               &kp H &kp J  &kp K     &kp L   &kp SEMI &kp SQT
	&kp LSHFT 		&kp Z &kp X &kp C &kp V &kp B                                                 &kp N &kp M  &kp COMMA &kp DOT &kp FSLH &mt RSHFT ENTER
                    &kp C_MUTE  &kp LCTRL   &kp LALT  &kp BSPC                        &lt SPACE   &kp LGUI &kp RCTRL     &kp LC(BSPC)
            >;
        };

        raise_layer {
            label = "Raise";
            
            sensor-bindings = <&inc_dec_kp C_VOLUME_UP C_VOLUME_DOWN &inc_dec_kp C_VOLUME_UP C_VOLUME_DOWN &inc_dec_kp C_VOLUME_UP C_VOLUME_DOWN>;
            
            bindings = <
	&trans  &kp EXCL &kp UP   &kp AT    &kp DLLR &kp PRCNT                                                &kp AMPS  &kp N7 &kp N8    &kp N9   &kp STAR &kp FSLH
	&trans  &kp LEFT &kp DOWN &kp RIGHT &kp LPAR &kp RPAR                &trans                           &kp CARET &kp N4 &kp N5    &kp N6   &kp MINUS &kp EQUAL
	&trans	&kp LBRC &kp RBRC &kp POUND &kp LBKT &kp RBKT                                                 &kp N0    &kp N1 &kp N2    &kp N3   &kp PLUS &kp BSLH
                            &trans    &mo LOWER  &trans   &kp DEL                            &trans       &kp N0     &kp DOT      &trans
            >;
        };

        lower_layer {
            label = "Lower";
            
            sensor-bindings = <&inc_dec_kp C_VOLUME_UP C_VOLUME_DOWN &inc_dec_kp C_VOLUME_UP C_VOLUME_DOWN &inc_dec_kp C_VOLUME_UP C_VOLUME_DOWN>;
            
            bindings = <
	&reset  	 &kp LG(TAB)          &bt BT_SEL 0  &bt BT_SEL 1     &bt BT_SEL 2   &kp LA(F4)                           &kp PSCRN  &kp C_VOL_UP &kp HOME  &kp PG_UP  &kp F11 &reset
	&bootloader  &kp LC(N1)           &kp LC(N2)    &kp LC(N3)       &kp LC(N4)     &kp LC(N9)         &trans            &trans     &kp C_VOL_DN &kp END   &kp PG_UP  &trans  &bootloader
	&trans	     &ext_power EP_TOG	  &bt BT_CLR    &kp CAPS         &trans         &kp LG(DOT)                          &kp N0     &kp C_MUTE   &trans    
                                                  &trans           &trans           &trans      &trans          &trans   &trans     &trans       &trans
            >;
        };




    };
};
